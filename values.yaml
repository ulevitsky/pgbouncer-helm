## PgBouncer Configuration
## 

# Enable/disable PgBouncer deployment
enabled: true

# Number of pgbouncer replicas
replicas: 1

# Max number of old replicasets to retain
revisionHistoryLimit: 10

# PgBouncer pod disruption budget
podDisruptionBudget:
  enabled: false
  # PDB configuration
  config:
    maxUnavailable: 1

# PgBouncer image configuration
image:
  repository: apache/airflow
  tag: airflow-pgbouncer-2025.03.05-1.23.1
  pullPolicy: IfNotPresent

# Metrics exporter configuration
metricsExporter:
  # Enable metrics exporter sidecar container
  enabled: true
  # PgBouncer metrics exporter image configuration
  image:
    repository: apache/airflow
    tag: airflow-pgbouncer-exporter-2025.03.05-0.18.0
    pullPolicy: IfNotPresent
    
  # Resources for the metrics exporter container
  resources: {}
  #  limits:
  #   cpu: 100m
  #   memory: 128Mi
  #  requests:
  #   cpu: 100m
  #   memory: 128Mi
  sslmode: "disable"
  
  # Supply the name of existing secret with PGBouncer connection URI containing
  # stats user and password.
  # You can load them to a k8s secret like the one below
  #  apiVersion: v1
  #  kind: Secret
  #  metadata:
  #    name: pgbouncer-stats-secret
  #  data:
  #     connection: postgresql://<stats user>:<password>@127.0.0.1:6543/pgbouncer?<connection params>
  #  type: Opaque
  statsSecretName: ~
  statsSecretKey: ~
  
  # Detailed default security context for metrics exporter container
  securityContexts:
    container: {}
  
  # Container level lifecycle hooks
  containerLifecycleHooks: {}
  
  livenessProbe:
    initialDelaySeconds: 10
    periodSeconds: 10
    timeoutSeconds: 1
  
  readinessProbe:
    initialDelaySeconds: 10
    periodSeconds: 10
    timeoutSeconds: 1
  
  # Mount additional volumes into the metrics exporter
  extraVolumeMounts: []

# Annotations for the PgBouncer deployment
annotations: {}

# Labels for the PgBouncer deployment
labels: {}

# Pod annotations for the PgBouncer deployment
podAnnotations: {}

# Environment variables to add to pgbouncer container
env: []

# Resource configuration for the PgBouncer container
resources: {}
#  limits:
#    cpu: 100m
#    memory: 128Mi
#  requests:
#    cpu: 100m
#    memory: 128Mi

# Resource configuration for the metrics exporter sidecar
# Metrics exporter sidecar configuration is now part of metricsExporter section

# Supply the name of existing secret with pgbouncer.ini and users.txt defined
# You can load them to a k8s secret like the one below
#  apiVersion: v1
#  kind: Secret
#  metadata:
#    name: pgbouncer-config-secret
#  data:
#     pgbouncer.ini: <base64_encoded pgbouncer.ini file content>
#     users.txt: <base64_encoded users.txt file content>
#  type: Opaque
configSecretName: ~

# SSL configuration
ssl:
  ca: ~
  cert: ~
  key: ~

# Add extra PgBouncer ini configuration in the databases section:
# https://www.pgbouncer.org/config.html#section-databases
extraIniMetadata: ~
extraIniResultBackend: ~

# Add extra general PgBouncer ini configuration: https://www.pgbouncer.org/config.html
extraIni: ~

# Mount additional volumes into pgbouncer
extraVolumes: []
extraVolumeMounts: []

# Launch additional containers into pgbouncer
extraContainers: []

# Select certain nodes for PgBouncer pods
nodeSelector: {}
affinity: {}
tolerations: []
topologySpreadConstraints: []

priorityClassName: ~

# Security context configuration
securityContexts:
  pod: {}
  container: {}

# Container level lifecycle hooks
containerLifecycleHooks:
  preStop:
    exec:
      # Allow existing queries clients to complete within 120 seconds
      command: ["/bin/sh", "-c", "killall -INT pgbouncer && sleep 120"]

# Service configuration
service:
  type: ClusterIP
  clusterIP: ~
  extraAnnotations: {}

# Ingress configuration
ingress:
  enabled: false
  annotations: {}
  path: "/metrics"
  pathType: "ImplementationSpecific"
  host: ""
  hosts: []
  #   # The hostname for the ingress (templated)
  # - name: ""
  #   tls:
  #     # Enable TLS termination for the ingress
  #     enabled: false
  #     # the name of a pre-created Secret containing a TLS private key and certificate
  #     secretName: ""
  ingressClassName: ""

# Network policy configuration
networkPolicy:
  enabled: false
  ingress:
    from: []
    ports:
      - port: 6543
      - port: 9127

# Service account configuration
serviceAccount:
  # Specifies whether a ServiceAccount should be created
  create: true
  # The name of the ServiceAccount to use
  name: ~
  # Annotations to add to the ServiceAccount
  annotations: {}

# PgBouncer configuration
verbose: 0
logDisconnections: 0
logConnections: 0
sslmode: "prefer"
ciphers: "normal"

# PgBouncer databases configuration
# This is the raw content that will go into the [databases] section of pgbouncer.ini
# You can specify multiple databases or use the catch-all '*' syntax
databases: |
  * = host=localhost port=5432
  # Add more databases as needed:
  # mydb = host=db.example.com port=5432 dbname=mydb
  # mydb2 = host=db2.example.com port=5432 dbname=mydb2 user=myuser password=mypassword

# PgBouncer users configuration
# Format: {"username": "password"} or {"username": "md5hash"}
# The password can be either plain text or an MD5 hash in the format: "md5" + md5(password + username)
# Example MD5: md5a45fcba1c6c1f73d10ed664a3c0b7ed6 (for username 'postgres' and password 'postgres')
users:
  postgres: "postgres"
  stats: "stats"
  # Add more users as needed:
  # user1: "password1"
  # user2: "md5hash2"

# Port configuration
ports:
  pgbouncer: 6543
  pgbouncerScrape: 9127

# Whether to mount the config secret
mountConfigSecret: true

# Registry configuration for pulling images
registry:
  secretName: ~
  connection: {}
